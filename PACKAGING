h1. New Release

h2. Tagging the Repo

Find all the changes since the last release. For example, if the last release
was 'v0.1.1' and you're on master (ie. v0.1.1..master (master is optional)):

    git tag -l

    # now change these numbers
    export PREV_REL=0.2.0
    export RELEASE=0.3.0

    # change PACKAGING and bin/dropfile for the new version numbers

    git commit -m "Prepare for new release of DropFile (v$RELEASE)" PACKAGING bin/dropfile
    git show
    git push origin master

    git log v${PREV_REL}..master | grep '^    ' | tac | sed 's/^   /  */' | xclip

Change the top version number and remove the 'ubuntu' part. Make sure it is in
'unstable' rather than 'lucid':

    DEBEMAIL=chilts@appsattic.com dch -v $RELEASE -D lucid

    git commit -m "Update changelog for release v$RELEASE" debian/changelog
    git show

    git push origin master

Test build it and release it (see below).

Then tag the release;

    git tag -m "Release v$RELEASE" v$RELEASE
    git tag -l
    git push origin v$RELEASE

h2. Making the Packages and Pushing them to the Debian Repository

Test build:

    cd ~/appsattic/dropfile/
    git fetch && git rebase origin/master && dpkg-buildpackage -us -uc -tc -t -b

Add it to the repo:

    ssh-agent > /tmp/ssh.$$
    . /tmp/ssh.$$
    ssh-add

    cd ../packages
    git fetch
    git rebase origin/master
    ./add-packages.sh ubuntu ../dropfile_${RELEASE}_all.deb
    find . -name "dropfile_${RELEASE}_all.deb" | xargs git add
    git status

Review the updates, rm the files we no longer need, add the new ones and commit:

    git commit -a -m "New release (v$RELEASE) of DropFile" # also deletes the ones missing
    git push origin master
    make rsync
    cd -

h2. Releasing

    ssh terminator.s.appsattic.com

    sudo apt-get update && sudo apt-get install dropfile

(Ends)

